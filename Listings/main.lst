C51 COMPILER V9.59.0.0   MAIN                                                              09/17/2022 08:22:49 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg52.h>
   2          #include <intrins.h>
   3          #include "temperature_control.h"
   4          
   5          #define uchar unsigned char
   6          #define uint unsigned int
   7          
   8          // storage data to be displayed
   9          uchar dat1, dat2, dat3, dat4;
  10          
  11          // DQ port of temperature sensor
  12          sbit  DQ = P3^0;
  13          
  14          // storage temperature from sensor
  15          uint  temp;
  16          uint  upper, lower;
  17          uchar temp_LSB;
  18          uchar temp_MSB;
  19          
  20          uint loop_cnt;
  21          
  22          // input and enable ports of motor drive
  23          sbit  IN1 = P1^7;
  24          sbit  IN2 = P1^6;
  25          sbit  EN1 = P1^5;
  26          
  27          // number 0 ~ 9 , '-', 'L', 'H', 'C'
  28          uchar code num[14] = { 0xc0, 0xf9, 0xa4,0xb0,0x99, 0x92, 0x82, 0xf8, 0x80, 0x90, 0xbf, 0xc7, 0x89, 0xc6};
  29          
  30          
  31          /*---------------------Utility Functions------------------------*/
  32          
  33          // delay z ms
  34          void delay_ms(uchar z)
  35          {
  36   1        uchar x, y;
  37   1        for(x = z; x > 0; x--)
  38   1          for(y = 1000; y > 0; y--);
  39   1      }
  40          
  41          // delay z us
  42          void delay_us(uchar z)
  43          {
  44   1        for(; z > 0; z--);
  45   1      }
  46          
  47          /*
  48           * 1) execute delay_10us function need a "lcall" instruction, it run for 2 us.
  49           * 2) call NOP function 6 times to delay more 6 us.
  50           * 3) execute "RET" instruction  for 2 us.
  51           */
  52          void delay_10us()
  53          {
  54   1        _nop_( );
C51 COMPILER V9.59.0.0   MAIN                                                              09/17/2022 08:22:49 PAGE 2   

  55   1        _nop_( );
  56   1        _nop_( );
  57   1        _nop_( );
  58   1        _nop_( );
  59   1        _nop_( );
  60   1      }
  61          
  62          /*------------------Temperature Collection----------------------*/
  63          /*
  64           * The steps of initialize temperature sensor (DS18B20):
  65           * 1) pull DQ to low.
  66           * 2) delay 480 us.
  67           * 3) pull DQ to high.
  68           * 4) delay and wait 80us. (if successed, sensor would feedback a low pulse from DQ.)
  69           * 5) if successed, delay more than 480 ms.
  70           */
  71          // uchar init_DS18B20()
  72          // {
  73          //  uchar presence;
  74          //  DQ = 0;
  75          
  76          //  delay_10us();        // delay 480 - 960 us
  77            
  78          //  DQ = 1;
  79          
  80          //  delay_10us();
  81          //  presence = DQ;
  82          
  83          //  delay_10us();  
  84          
  85          //  return presence;
  86          // }
  87          
  88          bit init_DS18B20(void)
  89          {
  90   1        bit init_flag = 0;
  91   1      
  92   1        DQ = 1;
  93   1        delay_us(8);
  94   1        DQ = 0;
  95   1        delay_us(80); 
  96   1        DQ = 1;
  97   1        delay_us(5); 
  98   1        init_flag = DQ;
  99   1        delay_us(20);
 100   1        
 101   1        return init_flag;
 102   1      }
 103          
 104          /*
 105           * The steps of reading byte from temperature sensor (DS18B20):
 106           * 1) pull DQ to low.
 107           * 2) delay 1 us.
 108           * 3) pull DQ to high, release bus to read data.
 109           * 4) delay 10 us.
 110           * 5) read the data bus to get a single bit.
 111           * 6) dalay 50 us.
 112           * 7) repeat step 1 ~ 6 to get the whole byte.
 113           */
 114          // uchar read_DS18B20()
 115          // {
 116          //  uchar i;
C51 COMPILER V9.59.0.0   MAIN                                                              09/17/2022 08:22:49 PAGE 3   

 117          //  uchar dat = 0;
 118          //  for (i = 8; i > 0; i--)
 119          //  {
 120          //    DQ = 0;
 121          
 122          //    _nop_();
 123          //    _nop_(); 
 124          
 125          //    dat >>= 1;          // 
 126          //    DQ = 1;              // release data bus
 127          
 128          //    delay_10us();        // Delay 6 us to wait for data stabilization
 129              
 130          //    if(DQ)
 131          //    {
 132          //             dat |= 0x80;
 133          //    }
 134          
 135          //    delay_10us();
 136          
 137          //  }
 138          //  return dat;
 139          // }
 140          
 141          uchar read_DS18B20(void)
 142          {
 143   1        uchar i;
 144   1        uchar dat;
 145   1        
 146   1        for(i = 0; i < 8; i++)
 147   1        {
 148   2          DQ = 1;
 149   2          delay_us(1);
 150   2          DQ = 0;
 151   2          dat >>= 1;
 152   2          DQ = 1;
 153   2          if(DQ)
 154   2          {
 155   3            dat |= 0x80;
 156   3          }
 157   2          delay_us(4);
 158   2        }
 159   1        return dat;
 160   1      }
 161          
 162          
 163          /*
 164           * The steps of writing byte to temperature sensor (DS18B20):
 165           * 1) pull DQ to low.
 166           * 2) delay 20 us.
 167           * 3) write byte from 0 bit to 7 bit.
 168           * 4) delay 60 us.
 169           * 5) pull DQ to high.
 170           * 6) repeat step 1 ~ 5 to write the whole byte.
 171           * 7) delay more 40 us at last.
 172           */
 173          // void write_DS18B20(uchar dat)
 174          // {
 175          //  uchar i;
 176          //  for (i = 8; i > 0; i--)
 177          //  {
 178          //    DQ = 0;
C51 COMPILER V9.59.0.0   MAIN                                                              09/17/2022 08:22:49 PAGE 4   

 179          
 180          //    delay_10us();
 181          //    delay_10us();
 182          
 183          //    DQ = dat & 0x01;
 184          
 185          //    delay_10us();
 186          
 187          //    DQ = 1;
 188          //    dat >>= 1;
 189          //  }
 190          
 191          //  delay_10us();
 192          // }
 193          
 194          void write_DS18B20(uchar dat)
 195          {
 196   1        uchar i;
 197   1        for(i = 8; i > 0; i--)
 198   1        {
 199   2          DQ = 0;
 200   2          DQ = dat & 0x01;
 201   2          delay_us(5);
 202   2          DQ = 1;
 203   2          dat >>= 1;
 204   2        }
 205   1      
 206   1        delay_us(4);
 207   1      }
 208          
 209          /*
 210           * The steps of reading collected temperature:
 211           * 1) initialize temperature sensor.
 212           * 2) write in 0xcc to skip ROM command.
 213           * 3) write in 0x44 to issues convert temperature command.
 214           * 4) delay 1 ms ensure convert successfully.
 215           * 
 216           * 5) initialize temperature sensor again.
 217           * 6) write in 0xcc to skip ROM command.
 218           * 7) write in 0xbe to issues read scratchpad command.
 219           * 8) read the collected temperature in sequence.
 220           */
 221          /* temperature convert */
 222          void convert_temp()
 223          {
 224   1        init_DS18B20();
 225   1        write_DS18B20(0xcc);
 226   1        write_DS18B20(0x44);
 227   1      }
 228          
 229          /* temperature read */
 230          uint read_temp()
 231          {
 232   1        uint temp_current;
 233   1      
 234   1        init_DS18B20();
 235   1        // write_DS18B20(0xcc);
 236   1        // write_DS18B20(0xbe);
 237   1        temp_LSB = read_DS18B20();
 238   1        temp_MSB = read_DS18B20();
 239   1        temp_current = (((temp_MSB << 8) | temp_LSB) >> 4) & 0x0f;  // & 0x0f to get absolute value
 240   1        return temp_current;
C51 COMPILER V9.59.0.0   MAIN                                                              09/17/2022 08:22:49 PAGE 5   

 241   1      }
 242          
 243          /* convert need 750ms, then read the temperatrue */
 244          void get_temp()
 245          {
 246   1        loop_cnt = 0;
 247   1        convert_temp();
 248   1        init_T1();
 249   1        while (loop_cnt > 750);
 250   1        temp = read_temp();
 251   1      }
 252          
 253          
 254          /*--------------------Temperature Display----------------------*/
 255          
 256          /*
 257           * note:  used common anode digital tube
 258           * 1) pull the position selection port (pos1, pos2...) high.
 259           * 2) write the display data (dat1, dat2...) into segment selection port (P0)
 260           */
 261          void display_pos(uchar p2, uchar dat)
 262          {
 263   1        switch (p2)
 264   1        {
 265   2          case 1:
 266   2            P2 = 0x01;
 267   2            P0 = num[dat];
 268   2            break;
 269   2          case 2:
 270   2            P2 = 0x02;
 271   2            P0 = num[dat];
 272   2            break;
 273   2          case 3:
 274   2            P2 = 0x04;
 275   2            P0 = num[dat];
 276   2            break;
 277   2          case 4:
 278   2            P2 = 0x08;
 279   2            P0 = num[dat];
 280   2            break;
 281   2          default:
 282   2            break;
 283   2        }
 284   1      }
 285          
 286          void display()
 287          {
 288   1        display_pos(4, dat4);
 289   1        delay_ms(5);
 290   1      
 291   1        display_pos(3, dat3);
 292   1        delay_ms(5);
 293   1      
 294   1        display_pos(2, dat2);
 295   1        delay_ms(5);
 296   1      
 297   1        display_pos(1, dat1);
 298   1        delay_ms(5);
 299   1      }
 300          
 301          
 302          /*------------Temperature Control and Motor Dirve---------------*/
C51 COMPILER V9.59.0.0   MAIN                                                              09/17/2022 08:22:49 PAGE 6   

 303          /* 
 304           * 
 305           * 
 306           */
 307          void control_temp()
 308          {
 309   1        // dat1 = 13;
 310   1        dat2 = 10;
 311   1        dat3 = temp / 10;
 312   1        dat4 = temp % 10;
 313   1        display();
 314   1      
 315   1        if (temp < lower)
 316   1        {
 317   2          TR0  = 0;
 318   2          dat1 = 11;
 319   2          EN1  = 0;
 320   2        }
 321   1        else if (temp > upper)
 322   1        {
 323   2          TR0  = 0;
 324   2          dat1 = 12;
 325   2          IN1  = 0;
 326   2          IN2  = 1;
 327   2          EN1  = 1;
 328   2        }
 329   1        else
 330   1        {
 331   2          dat1 = 13;
 332   2          init_T0();
 333   2          IN1  = 0;
 334   2          EN1  = 1;
 335   2        }
 336   1      }
 337          
 338          
 339          /*-----------------------Main Functions-------------------------*/
 340          void main()
 341          {
 342   1        uchar j;
 343   1        lower = 20, upper = 25;
 344   1      
 345   1        while(1)
 346   1        {
 347   2          get_temp();
 348   2          for (j = 100; j >0 ; j--) control_temp();
 349   2        }
 350   1      }
 351          
 352          
 353          /*-------------------------Interrupt---------------------------*/
 354          // Timer 0 
 355          void T0_motor() interrupt 1                       
 356          {
 357   1        TH0 = (65536 - 10000) / 256;
 358   1        TL0 = (65536 - 10000) % 256;
 359   1        IN2 = ~IN2;
 360   1      }
 361          
 362          // Timer 1
 363          void T1_temp_convert() interrupt 3
 364          {
C51 COMPILER V9.59.0.0   MAIN                                                              09/17/2022 08:22:49 PAGE 7   

 365   1        TH0  = (65536 - 1000) / 256;
 366   1        TL0  = (65536 - 1000) % 256;
 367   1        loop_cnt++;
 368   1      }
 369          
 370          // Delay 100ms. Generating 50% duty cycle PWM square wave for motor speed control.
 371          void init_T0()  
 372          {
 373   1        TMOD = 0X01;
 374   1        TH0  = (65536 - 10000) / 256;       
 375   1        TL0  = (65536 - 10000) % 256;
 376   1        ET0  = 1;
 377   1        EA   = 1;
 378   1        TR0  = 1;
 379   1      }
 380          
 381          // Delay 1ms. Temperature convert need more than 750ms.  
 382          void init_T1()
 383          {
 384   1        TMOD = 0X10;
 385   1        TH0  = (65536 - 1000) / 256;
 386   1        TL0  = (65536 - 1000) % 256;
 387   1        ET1  = 1;
 388   1        EA   = 1;
 389   1        TR1  = 1;
 390   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    504    ----
   CONSTANT SIZE    =     14    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
